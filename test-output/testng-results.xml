<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="2" passed="1" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-05-04T20:22:15 GMT-04:00" name="Default suite" finished-at="2024-05-04T20:22:36 GMT-04:00" duration-ms="20703">
    <groups>
    </groups>
    <test started-at="2024-05-04T20:22:15 GMT-04:00" name="Default test" finished-at="2024-05-04T20:22:36 GMT-04:00" duration-ms="20703">
      <class name="script.InvalidLogin2">
        <test-method is-config="true" signature="intReport(java.lang.String)[pri:0, instance:script.InvalidLogin2@11392934]" started-at="2024-05-04T20:22:14 GMT-04:00" name="intReport" finished-at="2024-05-04T20:22:15 GMT-04:00" duration-ms="600" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[report/Spark.html]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- intReport -->
        <test-method is-config="true" signature="preCondition(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.reflect.Method)[pri:0, instance:script.InvalidLogin2@11392934]" started-at="2024-05-04T20:22:15 GMT-04:00" name="preCondition" finished-at="2024-05-04T20:22:20 GMT-04:00" duration-ms="5153" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[no]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[https://192.168.111.1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[https://opensource-demo.orangehrmlive.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[qa.properties]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[public void script.InvalidLogin2.testInvalidLogin(java.lang.String,java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preCondition -->
        <test-method signature="testInvalidLogin(java.lang.String,java.lang.String)[pri:3, instance:script.InvalidLogin2@11392934]" started-at="2024-05-04T20:22:20 GMT-04:00" name="testInvalidLogin" data-provider="getData" finished-at="2024-05-04T20:22:22 GMT-04:00" duration-ms="1788" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[abcd123]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[xyz456]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLogin -->
        <test-method is-config="true" signature="postCondition(org.testng.ITestResult)[pri:0, instance:script.InvalidLogin2@11392934]" started-at="2024-05-04T20:22:22 GMT-04:00" name="postCondition" finished-at="2024-05-04T20:22:23 GMT-04:00" duration-ms="815" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidLogin status=SUCCESS method=InvalidLogin2.testInvalidLogin(java.lang.String,java.lang.String)[pri:3, instance:script.InvalidLogin2@11392934] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postCondition -->
        <test-method is-config="true" signature="preCondition(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.reflect.Method)[pri:0, instance:script.InvalidLogin2@11392934]" started-at="2024-05-04T20:22:23 GMT-04:00" name="preCondition" finished-at="2024-05-04T20:22:26 GMT-04:00" duration-ms="3503" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[no]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[https://192.168.111.1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[https://opensource-demo.orangehrmlive.com]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[qa.properties]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[public void script.InvalidLogin2.testInvalidLogin(java.lang.String,java.lang.String)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- preCondition -->
        <test-method signature="testInvalidLogin(java.lang.String,java.lang.String)[pri:3, instance:script.InvalidLogin2@11392934]" started-at="2024-05-04T20:22:26 GMT-04:00" name="testInvalidLogin" data-provider="getData" finished-at="2024-05-04T20:22:35 GMT-04:00" duration-ms="8611" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[admin]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[admin123]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertTrue(Assert.java:56)
at org.testng.Assert.assertTrue(Assert.java:66)
at script.InvalidLogin2.testInvalidLogin(InvalidLogin2.java:34)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidLogin -->
        <test-method is-config="true" signature="postCondition(org.testng.ITestResult)[pri:0, instance:script.InvalidLogin2@11392934]" started-at="2024-05-04T20:22:36 GMT-04:00" name="postCondition" finished-at="2024-05-04T20:22:36 GMT-04:00" duration-ms="180" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testInvalidLogin status=FAILURE method=InvalidLogin2.testInvalidLogin(java.lang.String,java.lang.String)[pri:3, instance:script.InvalidLogin2@11392934] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- postCondition -->
        <test-method is-config="true" signature="generateReport()[pri:0, instance:script.InvalidLogin2@11392934]" started-at="2024-05-04T20:22:36 GMT-04:00" name="generateReport" finished-at="2024-05-04T20:22:36 GMT-04:00" duration-ms="357" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
      </class> <!-- script.InvalidLogin2 -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
